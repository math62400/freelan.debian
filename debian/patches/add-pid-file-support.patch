From 8badab3abb450256c9ab64fc2a882b9a81ecae39 Mon Sep 17 00:00:00 2001
From: Julien Kauffmann <julien.kauffmann@freelan.org>
Date: Mon, 26 Mar 2012 16:29:38 +0200
Subject: [PATCH 1/2] Added pid_file option

---
 src/main.cpp |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/src/main.cpp b/src/main.cpp
index 479962c..d0211e3 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -132,6 +132,7 @@ struct cli_configuration
 	bool debug;
 #ifndef WINDOWS
 	bool foreground;
+	fs::path pid_file;
 #endif
 };
 
@@ -195,6 +196,7 @@ bool parse_options(int argc, char** argv, cli_configuration& configuration)
 	po::options_description daemon_options("Daemon");
 	daemon_options.add_options()
 	("foreground,f", "Do not run as a daemon.")
+	("pid_file,p", po::value<std::string>(), "A pid file to use.")
 	;
 
 	visible_options.add(daemon_options);
@@ -269,6 +271,20 @@ bool parse_options(int argc, char** argv, cli_configuration& configuration)
 	}
 #else
 	configuration.foreground = (vm.count("foreground") > 0);
+
+	if (vm.count("pid_file"))
+	{
+		configuration.pid_file = fs::absolute(vm["pid_file"].as<std::string>());
+	}
+	else
+	{
+		char* val = getenv("FREELAN_PID_FILE");
+
+		if (val)
+		{
+			configuration.pid_file = fs::absolute(std::string(val));
+		}
+	}
 #endif
 
 	fs::path configuration_file;
-- 
1.7.9.1


From 74d9935b2bcea51d5856c6b3dbc49410c6ef7d5b Mon Sep 17 00:00:00 2001
From: Julien Kauffmann <julien.kauffmann@freelan.org>
Date: Tue, 27 Mar 2012 10:20:11 +0200
Subject: [PATCH 2/2] Added pid file locking mechanism

---
 src/main.cpp                  |   17 +++++++
 src/posix/locked_pid_file.cpp |   69 ++++++++++++++++++++++++++++++
 src/posix/locked_pid_file.hpp |   73 ++++++++++++++++++++++++++++++++
 src/posix/pid_file.cpp        |   82 ++++++++++++++++++++++++++++++++++++
 src/posix/pid_file.hpp        |   93 +++++++++++++++++++++++++++++++++++++++++
 5 files changed, 334 insertions(+), 0 deletions(-)
 create mode 100644 src/posix/locked_pid_file.cpp
 create mode 100644 src/posix/locked_pid_file.hpp
 create mode 100644 src/posix/pid_file.cpp
 create mode 100644 src/posix/pid_file.hpp

diff --git a/src/main.cpp b/src/main.cpp
index d0211e3..6ccba25 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -67,6 +67,7 @@
 #include "win32/service.hpp"
 #else
 #include "posix/daemon.hpp"
+#include "posix/locked_pid_file.hpp"
 #endif
 
 #include "tools.hpp"
@@ -384,6 +385,17 @@ bool parse_options(int argc, char** argv, cli_configuration& configuration)
 
 void run(const cli_configuration& configuration)
 {
+#ifndef WINDOWS
+	boost::shared_ptr<posix::locked_pid_file> pid_file;
+
+	if (!configuration.pid_file.empty())
+	{
+		std::cout << "Creating PID file at: " << configuration.pid_file << std::endl;
+
+		pid_file.reset(new posix::locked_pid_file(configuration.pid_file));
+	}
+#endif
+
 	boost::function<void (freelan::log_level, const std::string&)> log_func = &do_log;
 
 #ifndef WINDOWS
@@ -393,6 +405,11 @@ void run(const cli_configuration& configuration)
 
 		log_func = &posix::syslog;
 	}
+
+	if (pid_file)
+	{
+		pid_file->write_pid();
+	}
 #endif
 
 	boost::asio::io_service io_service;
diff --git a/src/posix/locked_pid_file.cpp b/src/posix/locked_pid_file.cpp
new file mode 100644
index 0000000..7b53c19
--- /dev/null
+++ b/src/posix/locked_pid_file.cpp
@@ -0,0 +1,69 @@
+/*
+ * freelan - An open, multi-platform software to establish peer-to-peer virtual
+ * private networks.
+ *
+ * Copyright (C) 2010-2011 Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ *
+ * This file is part of freelan.
+ *
+ * freelan is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * freelan is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program. If not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * In addition, as a special exception, the copyright holders give
+ * permission to link the code of portions of this program with the
+ * OpenSSL library under certain conditions as described in each
+ * individual source file, and distribute linked combinations
+ * including the two.
+ * You must obey the GNU General Public License in all respects
+ * for all of the code used other than OpenSSL.  If you modify
+ * file(s) with this exception, you may extend this exception to your
+ * version of the file(s), but you are not obligated to do so.  If you
+ * do not wish to do so, delete this exception statement from your
+ * version.  If you delete this exception statement from all source
+ * files in the program, then also delete it here.
+ *
+ * If you intend to use freelan in a commercial software, please
+ * contact me : we may arrange this for a small fee or no fee at all,
+ * depending on the nature of your project.
+ */
+
+/**
+ * \file locked_pid_file.cpp
+ * \author Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ * \brief A flocked PID file handling class.
+ */
+
+#include "locked_pid_file.hpp"
+
+#include <boost/system/system_error.hpp>
+
+#include <sys/file.h>
+#include <errno.h>
+
+namespace posix
+{
+	locked_pid_file::locked_pid_file(const boost::filesystem::path& path) :
+		pid_file(path)
+	{
+		if (::flock(file_descriptor(), LOCK_EX) != 0)
+		{
+			throw boost::system::system_error(errno, boost::system::system_category(), "Locking on the PID file");
+		}
+	}
+
+	locked_pid_file::~locked_pid_file()
+	{
+		::flock(file_descriptor(), LOCK_UN);
+	}
+}
diff --git a/src/posix/locked_pid_file.hpp b/src/posix/locked_pid_file.hpp
new file mode 100644
index 0000000..f2a3d83
--- /dev/null
+++ b/src/posix/locked_pid_file.hpp
@@ -0,0 +1,73 @@
+/*
+ * freelan - An open, multi-platform software to establish peer-to-peer virtual
+ * private networks.
+ *
+ * Copyright (C) 2010-2011 Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ *
+ * This file is part of freelan.
+ *
+ * freelan is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * freelan is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program. If not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * In addition, as a special exception, the copyright holders give
+ * permission to link the code of portions of this program with the
+ * OpenSSL library under certain conditions as described in each
+ * individual source file, and distribute linked combinations
+ * including the two.
+ * You must obey the GNU General Public License in all respects
+ * for all of the code used other than OpenSSL.  If you modify
+ * file(s) with this exception, you may extend this exception to your
+ * version of the file(s), but you are not obligated to do so.  If you
+ * do not wish to do so, delete this exception statement from your
+ * version.  If you delete this exception statement from all source
+ * files in the program, then also delete it here.
+ *
+ * If you intend to use freelan in a commercial software, please
+ * contact me : we may arrange this for a small fee or no fee at all,
+ * depending on the nature of your project.
+ */
+
+/**
+ * \file locked_pid_file.hpp
+ * \author Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ * \brief A flocked PID file handling class.
+ */
+
+#ifndef LOCKED_PID_FILE_HPP
+#define LOCKED_PID_FILE_HPP
+
+#include "pid_file.hpp"
+
+namespace posix
+{
+	class locked_pid_file : public pid_file
+	{
+		public:
+
+			/**
+			 * \brief Create a PID file.
+			 * \param path The path to the PID file to create.
+			 *
+			 * If the specified file already exists, creation fails.
+			 */
+			locked_pid_file(const boost::filesystem::path& path);
+
+			/**
+			 * \brief Destroy the PID file.
+			 */
+			~locked_pid_file();
+	};
+}
+
+#endif /* LOCKED_PID_FILE_HPP */
diff --git a/src/posix/pid_file.cpp b/src/posix/pid_file.cpp
new file mode 100644
index 0000000..c22899f
--- /dev/null
+++ b/src/posix/pid_file.cpp
@@ -0,0 +1,82 @@
+/*
+ * freelan - An open, multi-platform software to establish peer-to-peer virtual
+ * private networks.
+ *
+ * Copyright (C) 2010-2011 Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ *
+ * This file is part of freelan.
+ *
+ * freelan is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * freelan is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program. If not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * In addition, as a special exception, the copyright holders give
+ * permission to link the code of portions of this program with the
+ * OpenSSL library under certain conditions as described in each
+ * individual source file, and distribute linked combinations
+ * including the two.
+ * You must obey the GNU General Public License in all respects
+ * for all of the code used other than OpenSSL.  If you modify
+ * file(s) with this exception, you may extend this exception to your
+ * version of the file(s), but you are not obligated to do so.  If you
+ * do not wish to do so, delete this exception statement from your
+ * version.  If you delete this exception statement from all source
+ * files in the program, then also delete it here.
+ *
+ * If you intend to use freelan in a commercial software, please
+ * contact me : we may arrange this for a small fee or no fee at all,
+ * depending on the nature of your project.
+ */
+
+/**
+ * \file pid_file.cpp
+ * \author Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ * \brief A PID file handling class.
+ */
+
+#include "pid_file.hpp"
+
+#include <boost/system/system_error.hpp>
+#include <boost/lexical_cast.hpp>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+
+namespace posix
+{
+	pid_file::pid_file(const boost::filesystem::path& path) :
+		m_file_path(path),
+		m_file_descriptor(::open(path.c_str(), O_CREAT | O_EXCL | O_WRONLY, 0644))
+	{
+		if (m_file_descriptor < 0)
+		{
+			throw boost::system::system_error(errno, boost::system::system_category(), "Creating PID file");
+		}
+	}
+
+	pid_file::~pid_file()
+	{
+		::unlink(m_file_path.c_str());
+		::close(m_file_descriptor);
+	}
+
+	void pid_file::write_pid() const
+	{
+		const std::string pid = boost::lexical_cast<std::string>(getpid());
+
+		::write(m_file_descriptor, pid.c_str(), pid.size());
+	}
+}
+
diff --git a/src/posix/pid_file.hpp b/src/posix/pid_file.hpp
new file mode 100644
index 0000000..91abcd5
--- /dev/null
+++ b/src/posix/pid_file.hpp
@@ -0,0 +1,93 @@
+/*
+ * freelan - An open, multi-platform software to establish peer-to-peer virtual
+ * private networks.
+ *
+ * Copyright (C) 2010-2011 Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ *
+ * This file is part of freelan.
+ *
+ * freelan is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * freelan is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program. If not, see
+ * <http://www.gnu.org/licenses/>.
+ *
+ * In addition, as a special exception, the copyright holders give
+ * permission to link the code of portions of this program with the
+ * OpenSSL library under certain conditions as described in each
+ * individual source file, and distribute linked combinations
+ * including the two.
+ * You must obey the GNU General Public License in all respects
+ * for all of the code used other than OpenSSL.  If you modify
+ * file(s) with this exception, you may extend this exception to your
+ * version of the file(s), but you are not obligated to do so.  If you
+ * do not wish to do so, delete this exception statement from your
+ * version.  If you delete this exception statement from all source
+ * files in the program, then also delete it here.
+ *
+ * If you intend to use freelan in a commercial software, please
+ * contact me : we may arrange this for a small fee or no fee at all,
+ * depending on the nature of your project.
+ */
+
+/**
+ * \file pid_file.hpp
+ * \author Julien KAUFFMANN <julien.kauffmann@freelan.org>
+ * \brief A PID file handling class.
+ */
+
+#ifndef PID_FILE_HPP
+#define PID_FILE_HPP
+
+#include <boost/filesystem/path.hpp>
+
+namespace posix
+{
+	class pid_file
+	{
+		public:
+
+			/**
+			 * \brief Create a PID file.
+			 * \param path The path to the PID file to create.
+			 *
+			 * If the specified file already exists, creation fails.
+			 */
+			pid_file(const boost::filesystem::path& path);
+
+			/**
+			 * \brief Destroy the PID file.
+			 */
+			~pid_file();
+
+			/**
+			 * \brief Get the associated file descriptor.
+			 * \return The associated file descriptor.
+			 */
+			int file_descriptor() const { return m_file_descriptor; }
+
+			/**
+			 * \brief Write the PID to the PID file.
+			 */
+			void write_pid() const;
+
+		private:
+
+			pid_file(const pid_file&);
+			pid_file& operator=(const pid_file&);
+
+			boost::filesystem::path m_file_path;
+			int m_file_descriptor;
+	};
+}
+
+#endif /* PID_FILE_HPP */
+
-- 
1.7.9.1

